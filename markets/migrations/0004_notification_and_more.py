# Generated by Django 4.2.16 on 2024-12-25 15:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import markets.enums


class Migration(migrations.Migration):

    dependencies = [
        ('markets', '0003_alter_contactphone_phone_alter_marketphone_phone_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published', models.DateField()),
                ('unpublished', models.DateField()),
                ('calendar_event', models.BooleanField()),
                ('type', models.CharField(choices=[(markets.enums.NotificationType['INFORMATION'], 'Информация'), (markets.enums.NotificationType['WARNING'], 'Важная информация'), (markets.enums.NotificationType['ALERT'], 'Критическая информация')], default=markets.enums.NotificationType['INFORMATION'], max_length=4)),
                ('text', models.TextField()),
                ('read', models.BooleanField(default=False)),
                ('attachment', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='markets.file')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'ordering': ['published'],
                'managed': True,
                'indexes': [models.Index(fields=['published'], name='index_by_published'), models.Index(fields=['unpublished'], name='index_by_unpublished')],
            },
        ),
        migrations.AddConstraint(
            model_name='notification',
            constraint=models.CheckConstraint(check=models.Q(('text', ''), _negated=True), name='non-empty notification text'),
        ),
        migrations.AddConstraint(
            model_name='notification',
            constraint=models.CheckConstraint(check=models.Q(('user__isnull', True), ('read', True), _negated=True), name="broadcast notification can not be 'read'"),
        ),
        migrations.AddConstraint(
            model_name='notification',
            constraint=models.CheckConstraint(check=models.Q(('type__in', ['INFO', 'WARN', 'ALRT'])), name='type values from set'),
        ),
        migrations.AddConstraint(
            model_name='notification',
            constraint=models.CheckConstraint(check=models.Q(('published__lt', models.F('unpublished'))), name='unpublished after published'),
        ),
    ]
