# Generated by Django 4.2.16 on 2024-12-22 09:04

from django.db import migrations, models
import markets.enums


class Migration(migrations.Migration):

    dependencies = [
        ('markets', '0001_initial'),
    ]

    operations = [
        migrations.AddConstraint(
            model_name='auxuserdata',
            constraint=models.CheckConstraint(check=models.Q(('itn__regex', '^((?:\\d{10})|(?:\\d{12}))$')), name='ITN regex'),
        ),
        migrations.AddConstraint(
            model_name='locality',
            constraint=models.CheckConstraint(check=models.Q(('locality_name', ''), _negated=True), name='Locality non-empty name'),
        ),
        migrations.AddConstraint(
            model_name='localitytype',
            constraint=models.CheckConstraint(check=models.Q(('type_name', ''), _negated=True), name='LocalityType non-empty name'),
        ),
        migrations.AddConstraint(
            model_name='market',
            constraint=models.CheckConstraint(check=models.Q(('market_id__regex', '^\\d{3}$')), name='market_id regex'),
        ),
        migrations.AddConstraint(
            model_name='market',
            constraint=models.CheckConstraint(check=models.Q(('geo_index__regex', '^\\d{5,6}$')), name='postal code regex'),
        ),
        migrations.AddConstraint(
            model_name='market',
            constraint=models.CheckConstraint(check=models.Q(('market_name', ''), _negated=True), name='non-empty market_name'),
        ),
        migrations.AddConstraint(
            model_name='market',
            constraint=models.CheckConstraint(check=models.Q(('branch', ''), _negated=True), name='non-empty branch'),
        ),
        migrations.AddConstraint(
            model_name='market',
            constraint=models.CheckConstraint(check=models.Q(('geo_street', ''), _negated=True), name='non-empty street'),
        ),
        migrations.AddConstraint(
            model_name='market',
            constraint=models.CheckConstraint(check=models.Q(('geo_house', ''), _negated=True), name='non-empty house'),
        ),
        migrations.AddConstraint(
            model_name='market',
            constraint=models.CheckConstraint(check=models.Q(('schedule', ''), _negated=True), name='non-empty schedule'),
        ),
        migrations.AddConstraint(
            model_name='marketfireprotection',
            constraint=models.CheckConstraint(check=models.Q(('fp_name', ''), _negated=True), name='MarketFireProtection non-empty name'),
        ),
        migrations.AddConstraint(
            model_name='marketprofitability',
            constraint=models.CheckConstraint(check=models.Q(('profitability_name', ''), _negated=True), name='MarketProfitability non-empty name'),
        ),
        migrations.AddConstraint(
            model_name='markettype',
            constraint=models.CheckConstraint(check=models.Q(('type_name', ''), _negated=True), name='MarketType non-empty name'),
        ),
        migrations.AddConstraint(
            model_name='streettype',
            constraint=models.CheckConstraint(check=models.Q(('type_name', ''), _negated=True), name='StreetType non-empty name'),
        ),
        migrations.AddConstraint(
            model_name='tradeplace',
            constraint=models.CheckConstraint(check=models.Q(('location_number__regex', '^\\d{9}[а-яё]{0,1}$')), name='location number regex'),
        ),
        migrations.AddConstraint(
            model_name='tradeplacetype',
            constraint=models.CheckConstraint(check=models.Q(('type_name__in', [markets.enums.OutletState['UNKNOWN'], markets.enums.OutletState['AVAILABLE_FOR_BOOKING'], markets.enums.OutletState['UNAVAILABLE_FOR_BOOKING'], markets.enums.OutletState['TEMPORARILY_UNAVAILABLE_FOR_BOOKING'], markets.enums.OutletState['BOOKED'], markets.enums.OutletState['RENTED']])), name='TradePlaceType name from set'),
        ),
        migrations.AddConstraint(
            model_name='tradeplacetype',
            constraint=models.CheckConstraint(check=models.Q(('color__regex', '^#[\\da-fA-F]{6}$')), name='TradePlaceType color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradeplacetype',
            constraint=models.CheckConstraint(check=models.Q(('wall_color__regex', '^0x[\\da-fA-F]{1,6}$')), name='TradePlaceType wall_color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradeplacetype',
            constraint=models.CheckConstraint(check=models.Q(('roof_color__regex', '^0x[\\da-fA-F]{1,6}$')), name='TradePlaceType roof_color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradesector',
            constraint=models.CheckConstraint(check=models.Q(('sector_name', ''), _negated=True), name='TradeSector non-empty name'),
        ),
        migrations.AddConstraint(
            model_name='tradesector',
            constraint=models.CheckConstraint(check=models.Q(('color__regex', '^#[\\da-fA-F]{6}$')), name='TradeSector color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradesector',
            constraint=models.CheckConstraint(check=models.Q(('wall_color__regex', '^0x[\\da-fA-F]{1,6}$')), name='TradeSector wall_color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradesector',
            constraint=models.CheckConstraint(check=models.Q(('roof_color__regex', '^0x[\\da-fA-F]{1,6}$')), name='TradeSector roof_color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradespectype',
            constraint=models.CheckConstraint(check=models.Q(('type_name', ''), _negated=True), name='TradeSpecType non-empty name'),
        ),
        migrations.AddConstraint(
            model_name='tradespectype',
            constraint=models.CheckConstraint(check=models.Q(('color__regex', '^#[\\da-fA-F]{6}$')), name='TradeSpecType color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradespectype',
            constraint=models.CheckConstraint(check=models.Q(('wall_color__regex', '^0x[\\da-fA-F]{1,6}$')), name='TradeSpecType wall_color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradespectype',
            constraint=models.CheckConstraint(check=models.Q(('roof_color__regex', '^0x[\\da-fA-F]{1,6}$')), name='TradeSpecType roof_color regex'),
        ),
        migrations.AddConstraint(
            model_name='tradetype',
            constraint=models.CheckConstraint(check=models.Q(('type_name', ''), _negated=True), name='TradeType non-empty name'),
        ),
    ]
