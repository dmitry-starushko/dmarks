# Generated by Django 4.2.16 on 2024-11-24 18:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import markets.models
import markets.models_mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DmUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=16, unique=True)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_change', models.DateTimeField()),
                ('title_change', models.CharField(max_length=128)),
                ('text_change', models.TextField()),
                ('link_change', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'change_log',
                'db_table_comment': 'Журнал внесенных изменений',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ContractStatusType',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(db_comment='Наименование типа специализации торгового места')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Тип статуса договора',
                'verbose_name_plural': 'Типы статуса договора',
                'db_table': 'contract_status_type',
                'db_table_comment': 'Типы статусов договоров',
                'ordering': ['type_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GlobalConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('param_name', models.CharField(db_comment='Имя параметра')),
                ('param_data', models.TextField(blank=True, db_comment='Значение параметра', null=True)),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Настройка',
                'verbose_name_plural': 'Настройки',
                'db_table': 'global_config',
                'db_table_comment': 'Глобальная конфигурация системы',
                'ordering': ['param_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Help',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('header', models.CharField(db_comment='Заголовок', max_length=1000)),
                ('html', models.TextField(db_comment='Содержание')),
                ('order_num', models.FloatField(db_comment='Порядок сортировки')),
                ('subj', models.CharField(db_comment='Тема', max_length=100)),
            ],
            options={
                'db_table': 'help',
                'db_table_comment': 'Помощь',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locality_name', models.CharField(db_comment='Наименование населенного пункта')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Локация',
                'verbose_name_plural': 'Локации',
                'db_table': 'locality',
                'db_table_comment': 'Населенные пункты',
                'ordering': ['locality_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LocalityType',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(db_comment='Наименование типа')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Тип локации',
                'verbose_name_plural': 'Типы локаций',
                'db_table': 'locality_type',
                'db_table_comment': 'Типы населенных пунктов',
                'ordering': ['type_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_name', models.CharField(db_comment='Наименование рынка', max_length=1000)),
                ('internal_id', models.CharField(blank=True, db_comment='Внутренний код рынка', max_length=50, null=True)),
                ('infr_parking', models.SmallIntegerField(blank=True, db_comment='Кол-во парковок', null=True)),
                ('infr_entrance', models.SmallIntegerField(blank=True, db_comment='Кол-во подъездов', null=True)),
                ('infr_restroom', models.SmallIntegerField(blank=True, db_comment='Кол-во санузлов', null=True)),
                ('infr_water_pipes', models.BooleanField(blank=True, db_comment='Наличие водопровода', null=True)),
                ('infr_sewerage', models.BooleanField(blank=True, db_comment='Наличие канализации', null=True)),
                ('infr_sewerage_type', models.CharField(blank=True, db_comment='Тип канализации', max_length=1000, null=True)),
                ('infr_storage', models.SmallIntegerField(blank=True, db_comment='Кол-во складских помещений', null=True)),
                ('info_statement_forms', models.TextField(blank=True, db_comment='Информация о формах заявлений', null=True)),
                ('info_statement_files', models.JSONField(blank=True, db_comment='Формы заявлений - файлы', null=True)),
                ('info_contracts', models.TextField(blank=True, db_comment='Информация о типовых договорах', null=True)),
                ('info_contracts_files', models.JSONField(blank=True, db_comment='Формы типовых договоров - файлы', null=True)),
                ('info_contracts_req', models.TextField(blank=True, db_comment='Информация о требованиях для оформления договоров/талонов', null=True)),
                ('info_contracts_req_files', models.JSONField(blank=True, db_comment='Требованиях для оформления договоров/талонов - файлы', null=True)),
                ('info_constitutive', models.TextField(blank=True, db_comment='Информация о копиях правоустанавливающих документов дочернего предприятия', null=True)),
                ('info_constitutive_files', models.JSONField(blank=True, db_comment='Копии правоустанавливающих документов дочернего предприятия - файлы', null=True)),
                ('info_other_docs', models.TextField(blank=True, db_comment='Информация о других документах', null=True)),
                ('info_other_docs_files', models.JSONField(blank=True, db_comment='Другие документы - файлы', null=True)),
                ('geo_street', models.TextField(db_comment='Наименование улицы', default='Не указана')),
                ('geo_house', models.CharField(db_comment='Дом', default='Не указан', max_length=50)),
                ('phone', models.CharField(blank=True, db_comment='Телефоны', max_length=255, null=True)),
                ('email', models.CharField(blank=True, db_comment='Электронные адреса', max_length=255, null=True)),
                ('schedule', models.TextField(blank=True, db_column='shedule', db_comment='График работы', null=True)),
                ('ads', models.TextField(blank=True, db_comment='Реклама', null=True)),
                ('market_square', models.FloatField(blank=True, db_comment='Общая площадь рынка', null=True)),
                ('market_count', models.IntegerField(blank=True, db_comment='Кол-во торговых мест', null=True)),
                ('activity', models.TextField(blank=True, db_comment='Возможные виды деятельности', null=True)),
                ('additional', models.JSONField(blank=True, db_comment="Дополнительные поля в формате {'param_name' : 'param_value'}", null=True)),
                ('schema_file', models.JSONField(blank=True, db_comment='Файл c данными отображения', null=True)),
                ('market_id', models.CharField(blank=True, db_comment='Уникальный идентификатор рынка', max_length=3, null=True)),
                ('market_id_char', models.CharField(blank=True, db_comment='Уникальный идентификатор рынка согласно шаблону 001010001', max_length=50, null=True)),
                ('citizen_appeal', models.TextField(blank=True, db_comment='Информация для обращения граждан/ФЛП', null=True)),
                ('lat', models.FloatField(blank=True, db_comment='Широта - координата рынка', null=True)),
                ('lng', models.FloatField(blank=True, db_comment='Долгота - координата рынка', null=True)),
                ('additional_name', models.CharField(blank=True, db_comment='Дополнительное наименование', max_length=1000, null=True)),
                ('geo_index', models.CharField(blank=True, db_comment='Индекс', max_length=10, null=True)),
                ('geo_full_address', models.CharField(blank=True, db_comment='Полный адрес через запятую', null=True)),
                ('geo_city', models.ForeignKey(db_comment='Город - id', default=markets.models.Locality.default_pk, on_delete=django.db.models.deletion.SET_DEFAULT, to='markets.locality')),
                ('geo_district', models.ForeignKey(db_comment='Район - id', default=markets.models.Locality.default_pk, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='markets_geo_district_set', to='markets.locality')),
            ],
            options={
                'verbose_name': 'Рынок',
                'verbose_name_plural': 'Рынки',
                'db_table': 'markets',
                'db_table_comment': 'Информация о рынках',
                'ordering': ['market_name', 'additional_name'],
                'managed': True,
            },
            bases=(markets.models_mixins.MkMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MarketFireProtection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fp_name', models.CharField(db_comment='Наименование противопожарной системы')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Тип противопожарной системы',
                'verbose_name_plural': 'Типы противопожарных систем',
                'db_table': 'market_fire_protection',
                'db_table_comment': 'Наличие и состав противопожарных систем',
                'ordering': ['fp_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MarketProfitability',
            fields=[
                ('id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('profitability_name', models.CharField(db_comment='Наименование категории рентабельности рынка')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Категория рентабельности рынка',
                'verbose_name_plural': 'Категории рентабельности рынка',
                'db_table': 'market_profitability',
                'db_table_comment': 'Категория рентабельности рынка',
                'ordering': ['profitability_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MarketType',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(db_comment='Наименование типа рынка')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Тип рынка',
                'verbose_name_plural': 'Типы рынка',
                'db_table': 'market_type',
                'db_table_comment': 'Типы рынков',
                'ordering': ['type_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Migration',
            fields=[
                ('version', models.CharField(max_length=180, primary_key=True, serialize=False)),
                ('apply_time', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'migration',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=250)),
                ('preload', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Параметр',
                'verbose_name_plural': 'Параметры',
            },
        ),
        migrations.CreateModel(
            name='RdcError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object', models.CharField(max_length=250)),
                ('text', models.TextField()),
            ],
            options={
                'verbose_name': 'Ошибка',
                'verbose_name_plural': 'Ошибки',
            },
        ),
        migrations.CreateModel(
            name='Renter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('renter_name', models.CharField(db_comment='Наименование арендатора')),
                ('legal_doc_info', models.CharField(blank=True, db_comment='Информация об уставных документах', null=True)),
                ('legal_doc_files', models.JSONField(blank=True, db_comment='Уставные документы - файлы', null=True)),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
                ('renter_phone', models.DecimalField(blank=True, db_comment='Номер телефона', decimal_places=0, max_digits=11, null=True)),
            ],
            options={
                'verbose_name': 'Арендатор',
                'verbose_name_plural': 'Арендаторы',
                'db_table': 'renter',
                'db_table_comment': 'Информация об арендаторах',
                'ordering': ['renter_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RenterType',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(db_comment='Наименование типа арендатора')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Тип арендатора',
                'verbose_name_plural': 'Типы арендаторов',
                'db_table': 'renter_type',
                'db_table_comment': 'Тип арендатора',
                'ordering': ['type_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='StreetType',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(db_comment='Наименование типа улиц (сокращенное)')),
                ('descr', models.TextField(blank=True, db_comment='Описание (полное наименование)', null=True)),
            ],
            options={
                'verbose_name': 'Тип улицы',
                'verbose_name_plural': 'Типы улиц',
                'db_table': 'street_type',
                'db_table_comment': 'Типы улиц',
                'ordering': ['type_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='StuffAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=64)),
                ('link', models.URLField(default='', max_length=512)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Операция',
                'verbose_name_plural': 'Операции',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='TradeContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateField(blank=True, db_comment='Дата начала договора', null=True)),
                ('date_end', models.DateField(blank=True, db_comment='Дата окончания договора', null=True)),
                ('copy_info', models.CharField(blank=True, db_comment='Информация о копии договора', null=True)),
                ('copy_files', models.JSONField(blank=True, db_comment='Файлы договора', null=True)),
                ('active_contract', models.BooleanField(blank=True, db_comment='Наличие договора аренды', null=True)),
                ('contract_num', models.CharField(blank=True, db_comment='Номер договора', null=True)),
                ('contract_status_type', models.ForeignKey(db_comment='id статус договора', on_delete=django.db.models.deletion.DO_NOTHING, to='markets.contractstatustype')),
            ],
            options={
                'verbose_name': 'Договор аренды',
                'verbose_name_plural': 'Договоры аренды',
                'db_table': 'trade_contract',
                'db_table_comment': 'Информация о договорах аренды',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TradePlaceType',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(db_comment='Наименование типа занятости торгового места')),
                ('descr', models.TextField(blank=True, db_comment='Опиcание', null=True)),
                ('color', models.CharField(blank=True, db_comment='Цвет в формате #ffffff', max_length=7, null=True, validators=[markets.models.Validators.css_color])),
                ('wall_color', models.CharField(db_comment='Цвет стен ТМ в формате 0xffffff, для 3D', default='0xffffff', max_length=8, validators=[markets.models.Validators.hex])),
                ('roof_color', models.CharField(db_comment='Цвет крыш ТМ в формате 0xffffff, для 3D', default='0xffffff', max_length=8, validators=[markets.models.Validators.hex])),
            ],
            options={
                'verbose_name': 'Тип занятости ТМ',
                'verbose_name_plural': 'Типы занятости ТМ',
                'db_table': 'trade_place_type',
                'db_table_comment': 'Типы занятости торгового места',
                'ordering': ['type_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TradeSector',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('sector_name', models.CharField(db_comment='Наименование сектора рынка')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Сектор',
                'verbose_name_plural': 'Секторы',
                'db_table': 'trade_sector',
                'db_table_comment': 'Сектора рынков',
                'ordering': ['sector_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TradeSpecType',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(db_comment='Наименование типа специализации торгового места')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
                ('color', models.CharField(blank=True, db_comment='Цвет в формате #ffffff', max_length=7, null=True)),
                ('wall_color', models.CharField(db_comment='Цвет стен ТМ в формате 0xffffff, для 3D', default='0xffffff', max_length=8, validators=[markets.models.Validators.hex])),
                ('roof_color', models.CharField(db_comment='Цвет крыш ТМ в формате 0xffffff, для 3D', default='0xffffff', max_length=8, validators=[markets.models.Validators.hex])),
            ],
            options={
                'verbose_name': 'Тип специализации ТМ',
                'verbose_name_plural': 'Типы специализации ТМ',
                'db_table': 'trade_spec_type',
                'db_table_comment': 'Типы специализации торгового места',
                'ordering': ['type_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TradeType',
            fields=[
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(db_comment='Наименование типа торгового места')),
                ('type_num', models.SmallIntegerField(blank=True, db_comment='Код типа объекта', null=True)),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
            ],
            options={
                'verbose_name': 'Тип ТМ',
                'verbose_name_plural': 'Типы ТМ',
                'db_table': 'trade_type',
                'db_table_comment': 'Типы торгового места',
                'ordering': ['type_name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255, unique=True)),
                ('auth_key', models.CharField(max_length=32)),
                ('password_hash', models.CharField(max_length=255)),
                ('password_reset_token', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('status', models.SmallIntegerField()),
                ('created_at', models.IntegerField()),
                ('updated_at', models.IntegerField()),
                ('verification_token', models.CharField(blank=True, max_length=255, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('ahash', models.CharField(blank=True, db_comment='Хеш для доступа по апи', max_length=32, null=True)),
                ('fio', models.CharField(blank=True, db_comment='Фамилия Имя Отчество пользователя', max_length=255, null=True)),
                ('areal', models.IntegerField(blank=True, db_comment='Ареал обитания. 0 - везде, 1 - только публичка', null=True)),
                ('accept', models.DateTimeField(blank=True, db_comment='момент согласия с политикой конфиденциальности', null=True)),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'user',
                'ordering': ['username'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserLogin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.IntegerField()),
                ('dat', models.DateTimeField()),
            ],
            options={
                'db_table': 'user_login',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TradePlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meas_area', models.FloatField(blank=True, db_comment='Площадь места', null=True)),
                ('meas_length', models.FloatField(blank=True, db_comment='Длина места', null=True)),
                ('meas_height', models.FloatField(blank=True, db_comment='Высота места', null=True)),
                ('impr_electricity', models.BooleanField(blank=True, db_comment='Наличие электричества', null=True)),
                ('impr_heat_supply', models.BooleanField(blank=True, db_comment='Наличие теплоснабжения', null=True)),
                ('impr_air_conditioning', models.BooleanField(blank=True, db_comment='Наличие кондиционирования', null=True)),
                ('impr_plumbing', models.BooleanField(blank=True, db_comment='Наличие водопровода', null=True)),
                ('impr_sewerage', models.BooleanField(blank=True, db_comment='Наличие канализации', null=True)),
                ('impr_drains', models.BooleanField(blank=True, db_comment='Наличие стоков', null=True)),
                ('impr_internet', models.BooleanField(blank=True, db_comment='Подключение к сети интернет', null=True)),
                ('impr_internet_type_id', models.SmallIntegerField(blank=True, db_comment='Тип подключения к сети интернет (0 - не заполнено, 1 - проводной, 2 - беспроводной)', null=True)),
                ('impr_add_equipment', models.BooleanField(blank=True, db_comment='Наличие стендов, мебели', null=True)),
                ('impr_fridge', models.BooleanField(blank=True, db_comment='Наличие холодильных установок', null=True)),
                ('impr_shopwindow', models.BooleanField(blank=True, db_comment='Наличие витрин', null=True)),
                ('price', models.DecimalField(blank=True, db_comment='Стоимость аренды торгового места в месяц', decimal_places=2, max_digits=12, null=True)),
                ('street_vending', models.BooleanField(blank=True, db_comment='Возможность выносной торговли', null=True)),
                ('receiv_state', models.BooleanField(blank=True, db_comment='Наличие дебиторской задолженности на текущий месяц', null=True)),
                ('receiv_amount', models.DecimalField(blank=True, db_comment='Размер дебиторской задолженности', decimal_places=2, max_digits=12, null=True)),
                ('pay_electricity', models.DecimalField(blank=True, db_comment='Оплата электричества', decimal_places=2, max_digits=12, null=True)),
                ('pay_heat_supply', models.DecimalField(blank=True, db_column='pay_heat_supplay', db_comment='Оплата услуг теплоснабжения', decimal_places=2, max_digits=12, null=True)),
                ('pay_air_conditioning', models.DecimalField(blank=True, db_comment='Оплата за кондиционер', decimal_places=2, max_digits=12, null=True)),
                ('pay_plumbing', models.DecimalField(blank=True, db_comment='Оплата услуг водоснабжения', decimal_places=2, max_digits=12, null=True)),
                ('pay_sewerage', models.DecimalField(blank=True, db_comment='Оплата услуг водоотведения', decimal_places=2, max_digits=12, null=True)),
                ('pay_drains', models.DecimalField(blank=True, db_comment='Оплата наличия стоков', decimal_places=2, max_digits=12, null=True)),
                ('pay_internet', models.DecimalField(blank=True, db_comment='Оплата интернета', decimal_places=2, max_digits=12, null=True)),
                ('pay_add_equipment', models.DecimalField(blank=True, db_comment='Аренда стендов, мебели', decimal_places=2, max_digits=12, null=True)),
                ('pay_fridge', models.DecimalField(blank=True, db_comment='Аренда холодильных установок', decimal_places=2, max_digits=12, null=True)),
                ('pay_shopwindows', models.DecimalField(blank=True, db_comment='Аренда витрин', decimal_places=2, max_digits=12, null=True)),
                ('location_row', models.CharField(blank=True, db_comment='Ряд торгового места', null=True)),
                ('location_floor', models.SmallIntegerField(blank=True, db_comment='Этаж торгового места', null=True)),
                ('location_number', models.CharField(blank=True, db_comment='Номер торгового места', null=True, unique=True, validators=[markets.models.Validators.outlet_number])),
                ('additional', models.JSONField(blank=True, db_comment='Дополнительные поля', null=True)),
                ('meas_width', models.FloatField(blank=True, db_comment='Ширина места', null=True)),
                ('internal_id', models.CharField(blank=True, db_comment='Текстовый код', null=True)),
                ('speciality_recommend', models.JSONField(blank=True, db_comment='Специализация торгового места (рекомендованная)', null=True)),
                ('speciality_actual', models.JSONField(blank=True, db_comment='Специализация торгового места (фактическая)', null=True)),
                ('activities_type', models.JSONField(blank=True, db_comment='Возможные виды деятельности', null=True)),
                ('contract_rent', models.ForeignKey(blank=True, db_comment='Информация о договорах аренды', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradecontract')),
                ('location_sector', models.ForeignKey(db_comment='id сектор торгового места', on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradesector')),
                ('market', models.ForeignKey(db_comment='Уникальный идентификатор рынка\r\n', on_delete=django.db.models.deletion.DO_NOTHING, related_name='trade_places', to='markets.market')),
                ('renter', models.ForeignKey(blank=True, db_comment='id - текущий арендатор', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.renter')),
                ('trade_place_type', models.ForeignKey(db_comment='Занятость торгового места', on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradeplacetype')),
                ('trade_spec_type_id_act', models.ForeignKey(blank=True, db_column='trade_spec_type_id_act', db_comment='Специализация торгового места (фактическая)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tradeplace_trade_spec_type_id_act_set', to='markets.tradespectype')),
                ('trade_spec_type_id_rec', models.ForeignKey(blank=True, db_column='trade_spec_type_id_rec', db_comment='Специализация торгового места (рекомендованная)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradespectype')),
                ('trade_type', models.ForeignKey(db_comment='Тип торгового места', on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradetype')),
            ],
            options={
                'verbose_name': 'Торговое место',
                'verbose_name_plural': 'Торговые места',
                'db_table': 'trade_place',
                'db_table_comment': 'Торговые места',
                'ordering': ['location_number'],
                'managed': True,
            },
            bases=(markets.models_mixins.TpMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SvgSchema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(db_comment='Поле для упорядочивания схем', default=0)),
                ('svg_schema', models.TextField(blank=True, db_comment='svg объекта', null=True)),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
                ('source_file', models.CharField(blank=True, db_comment='Имя загруженного файла', null=True)),
                ('floor', models.CharField(blank=True, db_comment='Этаж схемы объекта', null=True)),
                ('market', models.ForeignKey(blank=True, db_comment='id рынка', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='schemes', to='markets.market')),
            ],
            options={
                'verbose_name': 'Схема',
                'verbose_name_plural': 'Схемы',
                'db_table': 'svg_schema',
                'ordering': ['order'],
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='renter',
            name='renter_type',
            field=models.ForeignKey(db_comment='Тип арендатора', on_delete=django.db.models.deletion.DO_NOTHING, to='markets.rentertype'),
        ),
        migrations.CreateModel(
            name='MkImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(upload_to='markets/%Y/%m/%d')),
                ('market', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='markets.market')),
            ],
            options={
                'verbose_name': 'Изображение',
                'verbose_name_plural': 'Изображения',
            },
        ),
        migrations.AddField(
            model_name='market',
            name='geo_street_type',
            field=models.ForeignKey(blank=True, db_comment='Тип улицы - id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.streettype'),
        ),
        migrations.AddField(
            model_name='market',
            name='infr_fire_protection',
            field=models.ForeignKey(blank=True, db_comment='id - противопожарные системы', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.marketfireprotection'),
        ),
        migrations.AddField(
            model_name='market',
            name='market_type',
            field=models.ForeignKey(db_comment='id - тип рынка', on_delete=django.db.models.deletion.DO_NOTHING, to='markets.markettype'),
        ),
        migrations.AddField(
            model_name='market',
            name='profitability',
            field=models.ForeignKey(blank=True, db_comment='id - категория рентабельности', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.marketprofitability'),
        ),
        migrations.AddField(
            model_name='locality',
            name='locality_type',
            field=models.ForeignKey(blank=True, db_comment='Тип населенного пункта', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.localitytype'),
        ),
        migrations.AddField(
            model_name='locality',
            name='parent',
            field=models.ForeignKey(blank=True, db_comment='Родительская запись. Иерархическое подчинение', null=True, on_delete=django.db.models.deletion.SET_NULL, to='markets.locality'),
        ),
        migrations.CreateModel(
            name='ImportTradePlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_transaction', models.IntegerField()),
                ('meas_area', models.FloatField(blank=True, db_comment='Площадь места', null=True)),
                ('meas_length', models.FloatField(blank=True, db_comment='Длина места', null=True)),
                ('meas_width', models.FloatField(blank=True, db_comment='Ширина места', null=True)),
                ('meas_height', models.FloatField(blank=True, db_comment='Высота места', null=True)),
                ('impr_electricity', models.BooleanField(blank=True, db_comment='Наличие электричества', null=True)),
                ('impr_heat_supply', models.BooleanField(blank=True, db_comment='Наличие теплоснабжения', null=True)),
                ('impr_air_conditioning', models.BooleanField(blank=True, db_comment='Наличие кондиционирования', null=True)),
                ('impr_plumbing', models.BooleanField(blank=True, db_comment='Наличие водопровода', null=True)),
                ('impr_sewerage', models.BooleanField(blank=True, db_comment='Наличие канализации', null=True)),
                ('impr_drains', models.BooleanField(blank=True, db_comment='Наличие стоков', null=True)),
                ('impr_internet', models.BooleanField(blank=True, db_comment='Подключение к сети интернет', null=True)),
                ('impr_internet_type_id', models.SmallIntegerField(blank=True, db_comment='Тип подключения к сети интернет (1 - проводной, 2 - беспроводной)', null=True)),
                ('impr_add_equipment', models.BooleanField(blank=True, db_comment='Наличие стендов, мебели', null=True)),
                ('impr_fridge', models.BooleanField(blank=True, db_comment='Наличие холодильных установок', null=True)),
                ('impr_shopwindow', models.BooleanField(blank=True, db_comment='Наличие витрин', null=True)),
                ('price', models.DecimalField(blank=True, db_comment='Стоимость аренды торгового места в месяц', decimal_places=2, max_digits=12, null=True)),
                ('trade_spec_type_rec', models.CharField(blank=True, db_comment='Специализация торгового места (рекомендованная)', null=True)),
                ('trade_spec_type_act', models.CharField(blank=True, db_comment='Специализация торгового места (фактическая)', null=True)),
                ('street_vending', models.BooleanField(blank=True, db_comment='Возможность выносной торговли', null=True)),
                ('contract_date_start', models.DateField(blank=True, db_comment='Дата начала договора', null=True)),
                ('contract_date_end', models.DateField(blank=True, db_comment='Дата окончания договора', null=True)),
                ('contract_copy_info', models.CharField(blank=True, db_comment='Информация о копии договора', null=True)),
                ('contract_copy_files', models.JSONField(blank=True, db_comment='Файлы договора', null=True)),
                ('receiv_state', models.BooleanField(blank=True, db_comment='Наличие дебиторской задолженности на текущий месяц', null=True)),
                ('receiv_amount', models.DecimalField(blank=True, db_comment='Размер дебиторской задолженности', decimal_places=2, max_digits=12, null=True)),
                ('pay_electricity', models.DecimalField(blank=True, db_comment='Оплата электричества', decimal_places=2, max_digits=12, null=True)),
                ('pay_heat_supply', models.DecimalField(blank=True, db_column='pay_heat_supplay', db_comment='Оплата услуг теплоснабжения', decimal_places=2, max_digits=12, null=True)),
                ('pay_air_conditioning', models.DecimalField(blank=True, db_comment='Оплата за кондиционер', decimal_places=2, max_digits=12, null=True)),
                ('pay_plumbing', models.DecimalField(blank=True, db_comment='Оплата услуг водоснабжения', decimal_places=2, max_digits=12, null=True)),
                ('pay_sewerage', models.DecimalField(blank=True, db_comment='Оплата услуг водоотведения', decimal_places=2, max_digits=12, null=True)),
                ('pay_drains', models.DecimalField(blank=True, db_comment='Оплата наличия стоков', decimal_places=2, max_digits=12, null=True)),
                ('pay_internet', models.DecimalField(blank=True, db_comment='Оплата интернета', decimal_places=2, max_digits=12, null=True)),
                ('pay_add_equipment', models.DecimalField(blank=True, db_comment='Аренда стендов, мебели', decimal_places=2, max_digits=12, null=True)),
                ('pay_fridge', models.DecimalField(blank=True, db_comment='Аренда холодильных установок', decimal_places=2, max_digits=12, null=True)),
                ('pay_shopwindows', models.DecimalField(blank=True, db_comment='Аренда витрин', decimal_places=2, max_digits=12, null=True)),
                ('location_row', models.CharField(blank=True, db_comment='Ряд торгового места', null=True)),
                ('location_floor', models.SmallIntegerField(blank=True, db_comment='Этаж торгового места', null=True)),
                ('location_number', models.CharField(blank=True, db_comment='Номер торгового места', null=True, unique=True, validators=[markets.models.Validators.outlet_number])),
                ('renter_name', models.CharField(blank=True, db_comment='Наименование арендатора', null=True)),
                ('legal_doc_info', models.CharField(blank=True, db_comment='Информация об уставных документах', null=True)),
                ('legal_doc_files', models.JSONField(blank=True, db_comment='Уставные документы - файлы', null=True)),
                ('additional', models.JSONField(blank=True, db_comment='Дополнительные поля', null=True)),
                ('date_transaction', models.DateTimeField(blank=True, db_comment='Дата транзакции', null=True)),
                ('id_user_transaction', models.IntegerField(blank=True, db_comment='id создателя', null=True)),
                ('to_import', models.BooleanField(blank=True, db_comment='Импортировать запись? true - да, false - нет', null=True)),
                ('speciality_recommend', models.JSONField(blank=True, db_comment='Специализация торгового места (рекомендованная)', null=True)),
                ('speciality_actual', models.JSONField(blank=True, db_comment='Специализация торгового места (фактическая)', null=True)),
                ('active_contract', models.BooleanField(blank=True, db_comment='Наличие договора аренды', null=True)),
                ('activities_type', models.JSONField(blank=True, db_comment='Возможные виды деятельности', null=True)),
                ('tp_id_internal', models.IntegerField(blank=True, db_comment='id рынка, который импортировался успешно в таблицу trade_place', null=True)),
                ('descr', models.TextField(blank=True, db_comment='Описание импортируемой записи', null=True)),
                ('contract_rent', models.ForeignKey(blank=True, db_comment='Информация о договорах аренды', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradecontract')),
                ('contract_status_type', models.ForeignKey(blank=True, db_comment='Статус договора', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.contractstatustype')),
                ('location_sector', models.ForeignKey(blank=True, db_comment='id сектор торгового места', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradesector')),
                ('market', models.ForeignKey(blank=True, db_comment='Уникальный идентификатор рынка', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.market')),
                ('renter', models.ForeignKey(blank=True, db_comment='id - текущий арендатор', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.renter')),
                ('renter_type', models.ForeignKey(blank=True, db_comment='Тип арендатора', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.rentertype')),
                ('trade_place', models.ForeignKey(blank=True, db_comment='id импортируемого ТМ из таблицы trade_place', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradeplace')),
                ('trade_place_type', models.ForeignKey(blank=True, db_comment='Наименование типа занятости торгового места', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradeplacetype')),
                ('trade_type', models.ForeignKey(db_comment='Тип торгового места', on_delete=django.db.models.deletion.DO_NOTHING, to='markets.tradetype')),
            ],
            options={
                'db_table': 'import_trade_place',
                'db_table_comment': 'Импорт - торговые места',
                'managed': True,
            },
            bases=(markets.models_mixins.TpMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ImportMarket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_transaction', models.IntegerField(db_comment='id транзакции')),
                ('market_name', models.CharField(db_comment='Наименование рынка', max_length=500)),
                ('internal_id', models.CharField(blank=True, db_comment='Внутренний код рынка', max_length=50, null=True)),
                ('market_type_name', models.CharField(blank=True, db_comment='Тип рынка, если нет в базе', null=True)),
                ('profitability_name', models.CharField(blank=True, db_comment='Категория рентабельности, если нет в базе', null=True)),
                ('infr_parking', models.SmallIntegerField(blank=True, db_comment='Кол-во парковок', null=True)),
                ('infr_entrance', models.SmallIntegerField(blank=True, db_comment='Кол-во подъездов', null=True)),
                ('infr_restroom', models.SmallIntegerField(blank=True, db_comment='Кол-во санузлов', null=True)),
                ('infr_water_pipes', models.BooleanField(blank=True, db_comment='Наличие водопровода', null=True)),
                ('infr_sewerage', models.BooleanField(blank=True, db_comment='Наличие канализации', null=True)),
                ('infr_sewerage_type', models.CharField(blank=True, db_comment='Тип канализации', max_length=1000, null=True)),
                ('infr_storage', models.SmallIntegerField(blank=True, db_comment='Кол-во складских помещений', null=True)),
                ('infr_fire_protection_name', models.CharField(blank=True, db_comment='Противопожарные системы, если нет в базе', null=True)),
                ('info_statement_forms', models.TextField(blank=True, db_comment='Информация о формах зявлений', null=True)),
                ('info_statement_files', models.JSONField(blank=True, db_comment='Формы заявлений - файлы', null=True)),
                ('info_contracts', models.TextField(blank=True, db_comment='Информация о типовых договорах', null=True)),
                ('info_contracts_files', models.JSONField(blank=True, db_comment='Формы типовых договоров - файлы', null=True)),
                ('info_contracts_req', models.TextField(blank=True, db_comment='Информация о требованиях для оформления договоров/талонов', null=True)),
                ('info_contracts_req_files', models.JSONField(blank=True, db_comment='Требованиях для оформления договоров/талонов - файлы', null=True)),
                ('info_constitutive', models.TextField(blank=True, db_comment='Информация о копиях правоустанавливающих документов дочернего предприятия', null=True)),
                ('info_constitutive_files', models.JSONField(blank=True, db_comment='Копии правоустанавливающих документов дочернего предприятия - файлы', null=True)),
                ('info_other_docs', models.TextField(blank=True, db_comment='Информация о других документах', null=True)),
                ('info_other_docs_files', models.JSONField(blank=True, db_comment='Другие документы - файлы', null=True)),
                ('geo_city_name', models.CharField(blank=True, db_comment='Город, если нет в базе', null=True)),
                ('geo_district_name', models.CharField(blank=True, db_comment='Район, если нет в базе', null=True)),
                ('geo_street_type_name', models.CharField(blank=True, db_comment='Тип улицы, если нет в базе', null=True)),
                ('geo_street', models.TextField(blank=True, db_comment='Наименование улицы', null=True)),
                ('geo_house', models.CharField(blank=True, db_comment='Дом', max_length=50, null=True)),
                ('phone', models.CharField(blank=True, db_comment='Телефоны', max_length=255, null=True)),
                ('email', models.CharField(blank=True, db_comment='Электронные адреса', max_length=255, null=True)),
                ('schedule', models.CharField(blank=True, db_column='shedule', db_comment='График работы', null=True)),
                ('ads', models.TextField(blank=True, db_comment='Реклама', null=True)),
                ('market_square', models.FloatField(blank=True, db_comment='Общая площадь рынка', null=True)),
                ('market_count', models.IntegerField(blank=True, db_comment='Кол-во торговых мест', null=True)),
                ('activity', models.TextField(blank=True, db_comment='Возможные виды деятельности', null=True)),
                ('additional', models.JSONField(blank=True, db_comment='Дополнительные поля', null=True)),
                ('date_transaction', models.DateTimeField(blank=True, db_comment='Дата создания записи', null=True)),
                ('id_user_transaction', models.IntegerField(blank=True, db_comment='id создателя', null=True)),
                ('market_id', models.CharField(blank=True, db_comment='Уникальный идентификатор рынка', max_length=50, null=True)),
                ('market_id_char', models.CharField(blank=True, db_comment='Идентификатор записи markets.id', max_length=50, null=True)),
                ('citizen_appeal', models.TextField(blank=True, db_comment='Информация для обращения граждан/ФЛП', null=True)),
                ('geo_index', models.CharField(blank=True, db_comment='Индекс', max_length=10, null=True)),
                ('lat', models.FloatField(blank=True, db_comment='Широта', null=True)),
                ('lng', models.FloatField(blank=True, db_comment='Долгота', null=True)),
                ('additional_name', models.CharField(blank=True, db_comment='Дополнительное наименование', max_length=1000, null=True)),
                ('descr', models.TextField(blank=True, db_comment='Описание импортируемой записи', null=True)),
                ('to_import', models.BooleanField(blank=True, db_comment='Импортировать запись? true - да, false - нет', null=True)),
                ('geo_full_address', models.CharField(blank=True, db_comment='Полный адрес через запятую', null=True)),
                ('market_id_internal', models.IntegerField(blank=True, db_comment='id рынка, который импортировался успешно в таблицу markets', null=True)),
                ('geo_city', models.ForeignKey(blank=True, db_comment='Город, если есть в базе', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.locality')),
                ('geo_district', models.ForeignKey(blank=True, db_comment='Район, если есть в базе', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='importmarkets_geo_district_set', to='markets.locality')),
                ('geo_street_type', models.ForeignKey(blank=True, db_comment='Тип улицы, если есть в базе', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.streettype')),
                ('infr_fire_protection', models.ForeignKey(blank=True, db_comment='Противопожарные системы,, если есть в базе', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.marketfireprotection')),
                ('market_type', models.ForeignKey(blank=True, db_comment='Тип рынка, если есть в базе', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.markettype')),
                ('profitability', models.ForeignKey(blank=True, db_comment='Категория рентабельности, если есть в базе', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='markets.marketprofitability')),
            ],
            options={
                'db_table': 'import_markets',
                'db_table_comment': 'Временная таблица для импорта рынка',
                'managed': True,
            },
            bases=(markets.models_mixins.MkMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ImportData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
                ('import_status', models.TextField(db_comment='Статус импорта')),
                ('date_transaction', models.DateTimeField(db_comment='Дата транзакции')),
                ('filename', models.CharField(db_comment='Имя импортируемого файла')),
                ('filepath_server', models.CharField(db_comment='Путь импортируемого файла на сервере')),
                ('date_modify', models.DateTimeField(blank=True, db_comment='Дата измения транзакции', null=True)),
                ('params', models.JSONField(blank=True, db_comment='Настройки импорта', null=True)),
                ('result', models.JSONField(blank=True, db_comment='Результат импорта', null=True)),
                ('created_by', models.ForeignKey(blank=True, db_comment='id создателя (NULL для старых записей)', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_id_transaction', models.ForeignKey(db_column='user_id_transaction', db_comment='id создателя (в старой БД)', null=True, on_delete=django.db.models.deletion.CASCADE, to='markets.user')),
            ],
            options={
                'db_table': 'import_data',
                'db_table_comment': 'Данные о загрузке xml файлов (импорт из 1С)\r\nid - это номер транзакции импорта. Он один в started, stopped, imported\r\nStarted после удачной загрузки файла начинается испорт данных в таблицу\r\nImported - при удачной загрузке\r\nStopped - при возникновении ошибки (exception)\r\nЕсли статус остается Stared после завершения импорта - считать импор неудашимся, посольку удавшийся импорт идентифицирует статус Imported',
                'ordering': ['-date_transaction'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descr', models.TextField(blank=True, db_comment='Описание', null=True)),
                ('date_transaction', models.DateTimeField(db_comment='Дата создания записи')),
                ('booking_status', models.TextField(db_comment='Статус бронирования')),
                ('booking_status_case', models.TextField(blank=True, db_comment='Причина изменения статуса (например, причина отказа)', null=True)),
                ('booking_files', models.JSONField(blank=True, db_comment='Файлы для бронирования', null=True)),
                ('renter_id', models.DecimalField(blank=True, db_comment='Арендатор (пользователь из внешнего источника, надо искать в базе)', decimal_places=0, max_digits=32, null=True)),
                ('location_number', models.CharField(blank=True, db_comment='Номер торгового места (по странной логике ДЦТ, сюда падают номера которых нет в базе -- мы даем отлуп)', null=True)),
                ('booked_by', models.ForeignKey(blank=True, db_column='ng_user', db_comment='Кто забронировал (NULL для старых броней)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('trade_place', models.ForeignKey(db_comment='Идентификатор торгового места', on_delete=django.db.models.deletion.DO_NOTHING, related_name='bookings', to='markets.tradeplace')),
                ('user', models.ForeignKey(blank=True, db_column='user', db_comment='Кто забронировал (в старой версии БД)', null=True, on_delete=django.db.models.deletion.CASCADE, to='markets.user')),
            ],
            options={
                'verbose_name': 'Бронирование ТМ',
                'verbose_name_plural': 'Бронирования ТМ',
                'db_table': 'booking',
                'db_table_comment': 'Бронирование торговых мест',
                'ordering': ['-date_transaction'],
                'managed': True,
            },
        ),
        migrations.AddIndex(
            model_name='tradeplace',
            index=models.Index(fields=['location_number'], include=('location_floor',), name='index_by_number'),
        ),
        migrations.AddIndex(
            model_name='tradeplace',
            index=models.Index(fields=['location_floor'], include=('location_number',), name='index_by_storey'),
        ),
    ]
